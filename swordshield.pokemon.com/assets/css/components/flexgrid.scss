/*
  * WARNING
  * These are helper functions, only used to generate the html classes.
  * Disregard them.
 */
@function get-grid-class($base, $size: null) {
  $klass: $base;
  @if $size != null { $klass: $klass + '-' + $size }

  @return $klass;
}

@mixin add-grid-columns($size: null) {
  $klass: get-grid-class(column-flex, $size);

  @for $i from 1 through $total-columns {
    .#{$klass}-#{$i} {
      $w: grid-calc($i, $total-columns);

      // WHY U NO USE ONLY FLEX-BASIS?
      // Because flex-basis determine the minimum width not the maximum, and
      // unfortunately that is bugged on WiiU :/
      @include flex-basis($w);

      width: $w;

      // This is here to fix problems with the box model.
      // We can remove that as soon as we stop supporting IE10.
      max-width: $w;
    }
  }
}

@mixin add-grid-row($size: null) {
  $klass: get-grid-class(row-flex, $size);

  .#{$klass} {
    @include display-flex(flex);

    &-nowrap {
      @include flex-wrap(nowrap);
    }

    &-vertical-center {
      @include align-items(center);

      [class*="column-flex"]
      {
        margin-top: 0;
        margin-bottom: 0;
      }
    }

    &-vertical-uncenter {
      @include align-items(baseline);
    }

    &-horizontal-uncenter {
      @include justify-content(flex-start);
    }
  }
}

/*
  * FLEX GRID
  * The grid only starts to actually work for medium-up.
  * It felt unnecessary to use it at small size because the content is always 100% wide.
  *
  * USAGE:
  * .row-flex > parent
  * .column-flex-{size} > children
  *
  * Media Queries:
  * If you want a row or column to start behaving as flex or
  * to change it's width at a certain size you can use:
  * .row-flex-{media-querie} > parent
  * .column-flex-{media-querie}-{size} > children
  *
  * NON HTML CLASSES
  * Change the variable 'include-html-flexgrid-classes' inside settings/variables.scss
  * to deactivate the html classes and use only the mixins.
  *
  * No secret with the mixins here, I use foundation's grid-calc() function
  * to generate the correct sizes using the settings in the settings.scss file.
  * So if needed to change the number of columns, etc, just overwrite the variable
  * creating a new one inside our own settings.scss,
  * located on the /settings/variables.scss folder.
  *
  * BE WARE!!!!
  * When using the non html classes version you WILL HAVE TO ADD THE WII U FIX BY HAND!
  * You can find the fix at the bottom of this file.
  *
  * HTML CLASSES - STRIPPED VERSION
  * With this version you get the basic ONLY, the row-flex and column-flex classes along
  * with the Wii U global fix.
  *
  * You might like this one Liam.
  *
 */

/*
  * flex-grid-row()
  * This is equivalent to grid-row() from foundation.
 */
@mixin flex-grid-row() {
  @include display-flex(flex);
  @include flex-wrap(wrap);
  @include justify-content(center);

  margin: 0 auto;
  max-width: $row-width;
  width: 100%;
}

/*
  * flex-grid-column()
  * This is equivalent to grid-column() from foundation.
 */
@mixin flex-grid-column($size) {
  $w: grid-calc($size, $total-columns);

  @include flex-basis($w);

  -ms-flex: 0 1 auto;
  padding-left: ($column-gutter / 2);
  padding-right: ($column-gutter / 2);
  max-width: $w;
  width: $w;
}


@if $include-html-flexgrid-classes {

  [class*='row-flex'],
   // extra class for when you want a row behavior but not flex.
  .row {
    margin: 0 auto;
    max-width: $row-width;
    width: 100%;

    // second tier of rows
    [class*='row-flex'],
    .row {
      padding-left: 0;
      padding-right: 0;

      [class*='column-flex']
      {
        padding-left: 0;
        padding-right: 0;
      }
    }
  }

  .row,
  .row-flex {
    padding-left: ($row-gutter / 2);
    padding-right: ($row-gutter / 2);
  }

  // main column class
  [class*='column-flex'] {
    -ms-flex: 0 1 auto;
    padding-left: ($column-gutter / 2);
    padding-right: ($column-gutter / 2);
  }



  @if not $include-html-flexgrid-classes-stripped {
    @media #{$medium-up} {
      .row,
      [class*='row-flex'] {
        @include flex-wrap(wrap);
        @include justify-content(center);

        padding-left: ($row-gutter-md / 2);
        padding-right: ($row-gutter-md / 2);





        // second tier of rows
        .row,
        [class*='row-flex'] {
          [class*='column-flex'] {
            &:first-child {
              padding-right: ($column-gutter-md / 2);
              padding-left: 0;
            }

            &:last-child {
              padding-left: ($column-gutter-md / 2);
              padding-right: 0;
            }
          }
        }
      }
      // main column class
      [class*='column-flex'] {
        padding-left: ($column-gutter-md / 2);
        padding-right: ($column-gutter-md / 2);
      }

      @include add-grid-row();
      @include add-grid-columns();
    }

    @media #{$large-up} {
      @include add-grid-row(large);
      @include add-grid-columns(large);

      .row,
      [class*='row-flex'] {
        // second tier of rows
        .row,
        [class*='row-flex'] {
          [class*='column-flex'] {
            padding-left: ($column-gutter-md / 2);
            padding-right: ($column-gutter-md / 2);
          }
        }
      }
    }

    @media #{$xlarge-up} {
      @include add-grid-row(xlarge);
      @include add-grid-columns(xlarge);
    }

    @media #{$xxlarge-up} {
      @include add-grid-row(xxlarge);
      @include add-grid-columns(xxlarge);
    }
  }
}
